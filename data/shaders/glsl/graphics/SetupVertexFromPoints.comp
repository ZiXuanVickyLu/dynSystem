#version 450

struct Vertex {
	vec4 pos;
	vec4 uv;
	vec4 normal;
};

layout(std430, binding = 0) buffer VertexOut {
	Vertex vertexOut[ ];
};

layout(std430, binding = 1) buffer IndexOut {
	uint vertIndex[ ];
};

layout(std430, binding = 2) buffer VertexIn {
	vec3 vertexIn[ ];
};

layout(std430, binding = 3) buffer IndexIn {
	uint triangleIndex[ ];
};

layout (local_size_x = 32) in;

layout (push_constant) uniform PushConsts {
	uint sizeOfTriangle;
} pushConsts;

void main() 
{
	uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= pushConsts.sizeOfTriangle) 
		return;

	vec3 v0 = vertexIn[triangleIndex[3*index]];
	vec3 v1 = vertexIn[triangleIndex[3*index + 1]];
	vec3 v2 = vertexIn[triangleIndex[3*index + 2]];

	vec3 n = normalize(cross(v2 - v0, v1 - v0));

	vertexOut[3*index].pos = vec4(v0, 0);
	vertexOut[3*index].uv = vec4(0, 0, 0, 0);
	vertexOut[3*index].normal = vec4(n, 0);

	vertexOut[3*index+1].pos = vec4(v1, 0);
	vertexOut[3*index+1].uv = vec4(0, 0, 0, 0);
	vertexOut[3*index+1].normal = vec4(n, 0);

	vertexOut[3*index+2].pos = vec4(v2, 0);
	vertexOut[3*index+2].uv = vec4(0, 0, 0, 0);
	vertexOut[3*index+2].normal = vec4(n, 0);

	vertIndex[3*index] = 3*index;
	vertIndex[3*index+1] = 3*index+1;
	vertIndex[3*index+2] = 3*index+2;
}