#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(std430, binding = 0) buffer Input
{
   float inputs[];
};

layout(std430, binding = 1) buffer Output
{
   float outputs[];
};

layout(std430, binding = 2) buffer PartialSums
{
   float partial_sums[];
};

layout(std140, binding = 3) uniform PushConsts
{
  int n;
  int ScanType;
} consts;

layout (local_size_x = 256) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;


shared float sdata[sumSubGroupSize];
shared float sdata2[sumSubGroupSize];

float subgroupInclusive(){
	float value = 0;
	
	for(int i = int(gl_GlobalInvocationID.x-gl_SubgroupInvocationID) ; i <= int(gl_GlobalInvocationID.x) ; i++){
		value+=inputs[i];
	}
	
	return value;
}

void main()
{
    float sum = 0.0;
	float inputValue = 0.0;
    if (gl_GlobalInvocationID.x < consts.n)
    {
        sum = inputs[gl_GlobalInvocationID.x];
		inputValue = sum;
    }

   if (gl_GlobalInvocationID.x < consts.n)
    {
		sum = subgroupInclusive();
	}
	
    if (gl_SubgroupInvocationID == gl_SubgroupSize - 1)
    {
        sdata[gl_SubgroupID] = sum;
		sdata2[gl_SubgroupID] = sum;
    }

    memoryBarrierShared();
    barrier();

	if(gl_SubgroupSize > gl_NumSubgroups){
		if (gl_SubgroupID == 0){

			float warpSum = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : 0;
			warpSum = subgroupInclusiveAdd(warpSum);
			sdata[gl_SubgroupInvocationID] = warpSum;
		}
	}else{
		if (gl_GlobalInvocationID.x < consts.n)
		{
			uint thid = gl_GlobalInvocationID.x - gl_WorkGroupSize.x * gl_WorkGroupID.x;
			if(thid  >= 0 && thid  < gl_NumSubgroups){
			
				float value2 = 0;
					
				for(int i = 0 ; i <= int(thid) ; i++){
					value2+=sdata2[i];
				}
				
				sdata[thid] = value2;
				
			}
		}
	}
    memoryBarrierShared();
    barrier();

    float blockSum = 0;
    if (gl_SubgroupID > 0)
    {
        blockSum = sdata[gl_SubgroupID - 1];
    }

    sum += blockSum;

    if (gl_GlobalInvocationID.x < consts.n)
    {
        if(consts.ScanType != 0)
			outputs[gl_GlobalInvocationID.x] = sum;
		else
			outputs[gl_GlobalInvocationID.x] = sum - inputValue;
    }

    if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1)
    {
        partial_sums[gl_WorkGroupID.x] = sum;
    }
}
