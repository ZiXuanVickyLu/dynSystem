#version 450 core

// It is follows the alternative notation for bitonic sorting networks, as given at:
// https://en.m.wikipedia.org/wiki/Bitonic_sorter#Alternative_representation

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define T int
#define DataType T

#ifndef LOCAL_SIZE_X 
#define LOCAL_SIZE_X 64
#endif 
 
//SortType
#define UP   0 //1,2,3,4,5
#define DOWN 1 //5,4,3,2,1
 
#define FLT_MAX   3.4*10E35
#define FLT_MIN  -3.4*10E35
#define INT_MAX   999999999
#define INT_MIN  -999999999
#define UINT_MAX  2000000000
#define UINT_MIN -2000000000

// ENUM for uniform::Parameters.algorithm:
#define eLocalBms      0
#define eLocalDisperse 1
#define eBigFlip       2
#define eBigDisperse   3
#define addZero        4
#define subtractZero   5


layout (local_size_x = LOCAL_SIZE_X ) in; // Note hardware limit mentioned above!

layout (set=0, binding = 0) buffer SortData 
{
	// This is our unsorted input buffer - tightly packed, 
	// an array of N_GLOBAL_ELEMENTS elements.
	DataType data[];
};

// Note: These parameters are currently unused.
layout (set=0, binding=1) uniform Parameters {
	uint h;
	uint SortType;
	uint srcSize;
	uint dstSize;
	uint algorithm;
} parameters;

layout (set=0, binding = 2) buffer SortData2 
{
	DataType AddZeroArray[];
};
// Workgroup local memory. We use this to minimise round-trips to global memory.
// It allows us to evaluate a sorting network of up to 1024 with one shader invocation.
shared DataType local_value[LOCAL_SIZE_X * 2];

shared uint Sort_Type;
// naive comparison
bool is_greater(in const DataType left, in const DataType right){
	if(Sort_Type == UP)
		return left > right;
	else
		return left < right;
}

// Pick comparison funtion: for colors we want to compare perceptual brightness
// instead of a naive straight integer value comparison.
#define COMPARE is_greater

void global_compare_and_swap(ivec2 idx){
	if (COMPARE(data[idx.x], data[idx.y])) {
		DataType tmp = data[idx.x];
		data[idx.x] = data[idx.y];
		data[idx.y] = tmp;
	}
}

void local_compare_and_swap(ivec2 idx){
	if (COMPARE(local_value[idx.x], local_value[idx.y])) {
		DataType tmp = local_value[idx.x];
		local_value[idx.x] = local_value[idx.y];
		local_value[idx.y] = tmp;
	}
}

// Performs full-height flip (h height) over globally available indices.
void big_flip( in uint h) {

	uint t_prime = gl_GlobalInvocationID.x;
	uint half_h = h >> 1; // Note: h >> 1 is equivalent to h / 2 

	uint q       = ((2 * t_prime) / h) * h;
	uint x       = q     + (t_prime % half_h);
	uint y       = q + h - (t_prime % half_h) - 1; 


	global_compare_and_swap(ivec2(x,y));
}

// Performs full-height disperse (h height) over globally available indices.
void big_disperse( in uint h ) {

	uint t_prime = gl_GlobalInvocationID.x;

	uint half_h = h >> 1; // Note: h >> 1 is equivalent to h / 2 

	uint q       = ((2 * t_prime) / h) * h;
	uint x       = q + (t_prime % (half_h));
	uint y       = q + (t_prime % (half_h)) + half_h;

	global_compare_and_swap(ivec2(x,y));

}

// Performs full-height flip (h height) over locally available indices.
void local_flip(in uint h){
		uint t = gl_LocalInvocationID.x;
		barrier();

		uint half_h = h >> 1; // Note: h >> 1 is equivalent to h / 2 
		ivec2 indices = 
			ivec2( h * ( ( 2 * t ) / h ) ) +
			ivec2( t % half_h, h - 1 - ( t % half_h ) );

		local_compare_and_swap(indices);
}

void local_disperse(in uint h){
	uint t = gl_LocalInvocationID.x;
	for ( ; h > 1 ; h /= 2 ) {
		
		barrier();

		uint half_h = h >> 1; // Note: h >> 1 is equivalent to h / 2 
		ivec2 indices = 
			ivec2( h * ( ( 2 * t ) / h ) ) +
			ivec2( t % half_h, half_h + ( t % half_h ) );

		local_compare_and_swap(indices);
	}
}

void local_bitonic_merge_sort_example(uint h){
	uint t = gl_LocalInvocationID.x;
	for ( uint hh = 2; hh <= h; hh <<= 1 ) {  // note:  h <<= 1 is same as h *= 2
		local_flip( hh);
		local_disperse( hh/2 );
	}
}
void add_Zero(){
	uint t = gl_LocalInvocationID.x;
	uint offset = gl_WorkGroupSize.x * 2 * gl_WorkGroupID.x; // we can use offset if we have more than one invocation.
	if (offset+t*2+1 < parameters.srcSize) {
        #if DataType == int
            if(Sort_Type == UP){
                AddZeroArray[offset+t*2]= INT_MAX;
                AddZeroArray[offset+t*2+1]= INT_MAX;
            }
            else{
                AddZeroArray[offset+t*2]= INT_MIN;
                AddZeroArray[offset+t*2+1]= INT_MIN;
            }
        #elif DataType == uint
            if(Sort_Type == UP){
                AddZeroArray[offset+t*2]= UINT_MAX;
                AddZeroArray[offset+t*2+1]= UINT_MAX;
            }
            else{
                AddZeroArray[offset+t*2]= UINT_MIN;
                AddZeroArray[offset+t*2+1]= UINT_MIN;
            }
        #else
            if(Sort_Type == UP){
                AddZeroArray[offset+t*2]= FLT_MAX;
                AddZeroArray[offset+t*2+1]= FLT_MAX;
            }
            else{
                AddZeroArray[offset+t*2]= FLT_MIN;
                AddZeroArray[offset+t*2+1]= FLT_MIN;
            }
        #endif
	}
	
	if(offset+t*2<parameters.dstSize )AddZeroArray[offset+t*2]   = data[offset+t*2];
	if(offset+t*2+1<parameters.dstSize )AddZeroArray[offset+t*2+1] = data[offset+t*2+1];
	
}
void subtract_Zero(){
	uint t = gl_LocalInvocationID.x;
	uint offset = gl_WorkGroupSize.x * 2 * gl_WorkGroupID.x; // we can use offset if we have more than one invocation.

	if (offset+t*2 < parameters.dstSize) {
		data[offset+t*2]   = AddZeroArray[offset+t*2] ;
	}
	if (offset+t*2+1 < parameters.dstSize) {
		data[offset+t*2+1] = AddZeroArray[offset+t*2+1];
	}
	
}
void main(){

	uint t = gl_LocalInvocationID.x;


	uint offset = gl_WorkGroupSize.x * 2 * gl_WorkGroupID.x; // we can use offset if we have more than one invocation.

	Sort_Type = parameters.SortType;
	
	if (parameters.algorithm <= eLocalDisperse){
		// In case this shader executes a `local_` algorithm, we must 
		// first populate the workgroup's local memory.
		//
		if (offset+t*2 < parameters.dstSize) {
		    local_value[t*2]   = data[offset+t*2];
		}
		if (offset+t*2+1 < parameters.dstSize) {
		    local_value[t*2+1] = data[offset+t*2+1];
		}
	}

	switch (parameters.algorithm){
		case eLocalBms:
			local_bitonic_merge_sort_example(parameters.h);
		break;
		case eLocalDisperse:
			local_disperse(parameters.h);
		break;
		case eBigFlip:
			big_flip(parameters.h);
		break;
		case eBigDisperse:
			big_disperse(parameters.h);
		break;
		case addZero:
			add_Zero();
		break;
		case subtractZero:
			subtract_Zero();
		break;
	}

	// Write local memory back to buffer in case we pulled in the first place.

	if (parameters.algorithm <= eLocalDisperse){
		barrier();
		// push to global memory
		if (offset+t*2 < parameters.dstSize) {
		    data[offset+t*2]   = local_value[t*2];
		}
		if (offset+t*2+1 < parameters.dstSize) {
		    data[offset+t*2+1] = local_value[t*2+1];
		}
	}

	
}