#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

#define T int
#define DataType T

layout(std430, binding = 0) buffer Input
{
   DataType inputs[];
};

layout(std430, binding = 1) buffer Output
{
   DataType outputs[];
};

layout (local_size_x = 256) in;
layout (constant_id = 2) const int sumSubGroupSize = 64;

layout(push_constant) uniform PushConsts
{
  int n;
} consts;

shared DataType sdata[sumSubGroupSize];
shared DataType sdata2[sumSubGroupSize];

DataType subGroupAdd(){
	DataType value = 0;
	
	uint begin = gl_GlobalInvocationID.x-gl_SubgroupInvocationID;
	uint end = begin + gl_SubgroupSize;
	
	for(uint i = begin ; i < end; i++){
		value+=inputs[i];
	}
	
	return value;
}


void main()
{
    DataType sum = 0;
    if (gl_GlobalInvocationID.x < consts.n)
    {
        sum = inputs[gl_GlobalInvocationID.x];
    }

	sum = subGroupAdd();
	
    if (gl_SubgroupInvocationID == 0)
    {
        sdata[gl_SubgroupID] = sum;
		sdata2[gl_SubgroupID] = sum;
    }

    memoryBarrierShared();
    barrier();
	
	
	if(gl_SubgroupSize > gl_NumSubgroups){
		if (gl_SubgroupID == 0)
		{
			sum = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : 0;
			sum = subgroupAdd(sum);
		}
	}else{
		if (gl_GlobalInvocationID.x < consts.n)
		{
			if (gl_SubgroupID == 0){
				DataType value2 = 0;
					
				for(int i = 0 ; i <= int(gl_NumSubgroups) ; i++){
					value2+=sdata2[i];
				}
				
				sum = value2;	
			}		
		}	
	}
	
	if (gl_LocalInvocationID.x == 0)
    {
        outputs[gl_WorkGroupID.x] = sum;
    }
	
}
